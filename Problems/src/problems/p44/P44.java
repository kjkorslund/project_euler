package problems.p44;

import java.util.HashMap;

public class P44 {
	/*
	 * Pentagonal numbers are generated by the formula, P_n=n(3n−1)/2. The first
	 * ten pentagonal numbers are:
	 * 
	 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
	 * 
	 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their
	 * difference, 70 − 22 = 48, is not pentagonal.
	 * 
	 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
	 * difference is pentagonal and D = |Pk − Pj| is minimised; what is the
	 * value of D?
	 */
	public static void main(String[] args) {
		
		for(int i=1; i<10000;i++) {
			for(int j=1;j<10000;j++) {
				long pi = pentagonal(i);
				long pj = pentagonal(j);
//				if (isPentagonal(pi+pj)) {
//					//System.out.println("[+] " + pi + "," + pj);
//				}
//				if (isPentagonal(pj-pi)) {
//					//System.out.println("[-] " + pi + "," + pj);
//				}
			}
		}
	}
	
	static boolean isPentagonal(long p) {
//		int i=1;
//		long p = pentagonal(i);
//		while(p < n) {
//			i++;
//			p = pentagonal(i);
//		}
//		return p == n;
		Long n = PentagonalCache.instance.reversePentagonal(p);
		return (n != null);
	}
	
	static long pentagonal(long n) {
		return n*(3*n-1)/2;
	}
	
	static class PentagonalCache {
		static PentagonalCache instance = new PentagonalCache();
		
		long maxN = 0;
		HashMap<Long,Long> p2n = new HashMap<Long,Long>();
		
		Long reversePentagonal(long p) {
			if (p2n.containsKey(p)) return p2n.get(p);
			populateThrough(p);
			return p2n.get(p);
		}
		
		void populateThrough(long p) {
			long n = maxN+1;
			long pn = pentagonal(n);
			while(pn <= p) {
				p2n.put(pn, n);
				n++;
				pn = pentagonal(n);
			}
			maxN = n-1;
		}
	}
}
