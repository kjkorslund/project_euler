from extensions import IntExt, StrExt

# [Problem 1](https://projecteuler.net/problem=1)
# 
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.
# 
# Find the sum of all the multiples of 3 or 5 below 1000.
def P1():
  sum = 0
  for i in range(1, 1000):
    i = IntExt(i)
    if i.is_multiple_of(3) or i.is_multiple_of(5):
      sum += i
  return sum

# [Problem 2](https://projecteuler.net/problem=2):
# 
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
# starting with 1 and 2, the first 10 terms will be:
# 
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
# the sum of the even-valued terms.
def P2():
  def fibonacci():
    current = 1
    next = 2
    while True:
      yield current
      current, next = next, current+next
  fib_sequence = fibonacci()

  sum = 0
  n = next(fib_sequence);
  while n < 4_000_000:
    if IntExt.is_even(n): sum += n
    n = next(fib_sequence)

  return sum

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143?</p>
def P3():
  return IntExt.find_prime_factors(600851475143)[-1]

# A palindromic number reads the same both ways. The largest palindrome made from the product of
# two 2-digit numbers is 9009 = 91 x 99.
# 
# Find the largest palindrome made from the product of two 3-digit numbers.
def P4():
  result = 0
  for i in range(1,1000):
    for j in range(i,1000):
      product = i*j
      if product > result and IntExt.is_palindromic(product):
        result = product
  return result

# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible (divisible with no remainder) by all of the numbers from 1 to 20?
def P5():
  def evenlyDivisibleUpTo(n, dMax):
    for d in range(dMax, 1, -1):
      if not IntExt.is_multiple_of(n, d): return False
    return True

  increment = 20
  candidate = increment
  while True:
    if evenlyDivisibleUpTo(candidate, increment): return candidate
    candidate += increment