from extensions import IntExt, StrExt
from primes import global_primes as primes

# [Problem 1](https://projecteuler.net/problem=1)
# 
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
# The sum of these multiples is 23.
# 
# Find the sum of all the multiples of 3 or 5 below 1000.
def P1():
  sum = 0
  for i in range(1, 1000):
    i = IntExt(i)
    if i.is_multiple_of(3) or i.is_multiple_of(5):
      sum += i
  return sum

# [Problem 2](https://projecteuler.net/problem=2):
# 
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
# starting with 1 and 2, the first 10 terms will be:
# 
#   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
# the sum of the even-valued terms.
def P2():
  def fibonacci():
    current = 1
    next = 2
    while True:
      yield current
      current, next = next, current+next
  fib_sequence = fibonacci()

  sum = 0
  n = next(fib_sequence);
  while n < 4_000_000:
    if IntExt.is_even(n): sum += n
    n = next(fib_sequence)

  return sum

# The prime factors of 13195 are 5, 7, 13 and 29.
# What is the largest prime factor of the number 600851475143?</p>
def P3():
  return IntExt.find_prime_factors(600851475143)[-1]

# A palindromic number reads the same both ways. The largest palindrome made from the product of
# two 2-digit numbers is 9009 = 91 x 99.
# 
# Find the largest palindrome made from the product of two 3-digit numbers.
def P4():
  result = 0
  for i in range(1,1000):
    for j in range(i,1000):
      product = i*j
      if product > result and IntExt.is_palindromic(product):
        result = product
  return result

# 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
# What is the smallest positive number that is evenly divisible (divisible with no remainder) by all of the numbers from 1 to 20?
def P5():
  def evenlyDivisibleUpTo(n, dMax):
    for d in range(dMax, 1, -1):
      if not IntExt.is_multiple_of(n, d): return False
    return True

  increment = 20
  candidate = increment
  while True:
    if evenlyDivisibleUpTo(candidate, increment): return candidate
    candidate += increment

# The sum of the squares of the first ten natural numbers is,
#     1^2 + 2^2 + ... + 10^2 = 385
# The square of the sum of the first ten natural numbers is,
#     (1 + 2 + ... + 10)^2 = 55^2 = 3025
# Hence the difference between the sum of the squares of the first ten natural numbers and the
# square of the sum is 3025 - 385 = 2640.
# 
# Find the difference between the sum of the squares of the first one hundred natural numbers and
# the square of the sum.
def P6():
  end = 100
  sum_of_squares, sums = 0, 0
  for i in range(1, end+1):
    sum_of_squares += i*i
    sums += i
  square_of_sums = sums*sums
  result = abs(sum_of_squares - square_of_sums)
  print(f"|{sum_of_squares} - {square_of_sums}| = {result}")
  return result

# By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is
# 13.  What is the 10,001st prime number?
def P7():
  target = 10_001
  return primes[target-1]

# 
# The four adjacent digits in the 1000-digit number that have the greatest product are
# 9 x 9 x 8 x 9 = 5832.
# 
#     73167176531330624919225119674426574742355349194934
#     96983520312774506326239578318016984801869478851843
#     85861560789112949495459501737958331952853208805511
#     12540698747158523863050715693290963295227443043557
#     66896648950445244523161731856403098711121722383113
#     62229893423380308135336276614282806444486645238749
#     30358907296290491560440772390713810515859307960866
#     70172427121883998797908792274921901699720888093776
#     65727333001053367881220235421809751254540594752243
#     52584907711670556013604839586446706324415722155397
#     53697817977846174064955149290862569321978468622482
#     83972241375657056057490261407972968652414535100474
#     82166370484403199890008895243450658541227588666881
#     16427171479924442928230863465674813919123162824586
#     17866458359124566529476545682848912883142607690042
#     24219022671055626321111109370544217506941658960408
#     07198403850962455444362981230987879927244284909188
#     84580156166097919133875499200524063689912560717606
#     05886116467109405077541002256983155200055935729725
#     71636269561882670428252483600823257530420752963450
# 
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
# What is the value of this product?
# 
def P8():
  digits = \
    "73167176531330624919225119674426574742355349194934" \
    "96983520312774506326239578318016984801869478851843" \
    "85861560789112949495459501737958331952853208805511" \
    "12540698747158523863050715693290963295227443043557" \
    "66896648950445244523161731856403098711121722383113" \
    "62229893423380308135336276614282806444486645238749" \
    "30358907296290491560440772390713810515859307960866" \
    "70172427121883998797908792274921901699720888093776" \
    "65727333001053367881220235421809751254540594752243" \
    "52584907711670556013604839586446706324415722155397" \
    "53697817977846174064955149290862569321978468622482" \
    "83972241375657056057490261407972968652414535100474" \
    "82166370484403199890008895243450658541227588666881" \
    "16427171479924442928230863465674813919123162824586" \
    "17866458359124566529476545682848912883142607690042" \
    "24219022671055626321111109370544217506941658960408" \
    "07198403850962455444362981230987879927244284909188" \
    "84580156166097919133875499200524063689912560717606" \
    "05886116467109405077541002256983155200055935729725" \
    "71636269561882670428252483600823257530420752963450"
  
  def adjacent_digits(s, length):
    for i in range(0, len(s)-length+1):
      yield s[i:i+length]

  def digits_product(digits):
    product = 1
    for ch in digits:
      if ch >= '0' and ch <= '9':
        product *= ord(ch) - ord('0')
    return product

  target = 13
  result, resultProduct = "", 0
  for s in adjacent_digits(digits, target):
    product = digits_product(s)
    if product > resultProduct:
      result, resultProduct = s, product
  print(f"{result} => {resultProduct}")
  return resultProduct

# A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
#     a^2 + b^2 = c^2.
# For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
# 
# There exists exactly one Pythagorean triplet for which a + b + c = 1000.  Find the product abc.
def P9():
  for a in range(1,500):
    for b in range(a,1000-a):
      c = 1000 - (a + b)
      if c < b: break
      if a*a + b*b == c*c:
        print(f"{a}^2 + {b}^2 == {c}^2 == {a*b*c}")
        return a*b*c
  return -1