// Page 1 problems (P1 - P50)

using Project_euler.Extensions;
using Project_euler.Utils;

namespace Project_euler.Problems;


/**
 * [Problem 1](https://projecteuler.net/problem=1)
 * 
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 * 
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
class P1 : IProblem<int>
{
  public int Solve()
  {
    int sum = 0;
    for (int i = 1; i < 1000; i++)
    {
      if (i.IsMultipleOf(3) || i.IsMultipleOf(5))
      {
        sum += i;
      }
    }
    return sum;
  }
};

/**
 * [Problem 2](https://projecteuler.net/problem=2):
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
 * starting with 1 and 2, the first 10 terms will be:
 * 
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
 * the sum of the even-valued terms.
 */
class P2 : IProblem<int>
{
  public int Solve()
  {
    int sum = Fibonacci().TakeWhile(it => it <= 4_000_000)
      .Where(it => it.IsEven()).Sum();
    return sum;
  }

  IEnumerable<int> Fibonacci()
  {
    int current = 1, next = 2;
    while (true)
    {
      yield return current;
      int nextnext = current + next;
      current = next; next = nextnext;
    }
  }
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143?</p>
 */
class P3 : IProblem<int>
{
  public int Solve()
  {
    //Console.WriteLine(string.Join(',', 13195L.FindPrimeFactors()));
    return (int)600851475143L.FindPrimeFactors().Last();
  }
}

/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of
 * two 2-digit numbers is 9009 = 91 x 99.
 * 
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
class P4 : IProblem<int>
{
  public int Solve()
  {
    int solution = 0;
    for (int i = 1; i < 1000; i++)
    {
      for (int j = i; j < 1000; j++)
      {
        var product = j * i;
        if (product > solution && product.IsPalindromic())
        {
          solution = product;
        }
      }
    }
    return solution;
  }
}

/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible (divisible with no remainder) by all of the numbers from 1 to 20?
 */
class P5 : IProblem<int>
{
  public int Solve()
  {
    int target = 20;
    for (int i = target; i < int.MaxValue; i += target)
    {
      if (IsFullyDivisibleUpTo(target, i))
      {
        return i;
      }
    }
    return -1;
  }

  private bool IsFullyDivisibleUpTo(int divisor, int n)
  {
    for (int d = divisor; d > 1; d--)
    {
      if (!n.IsMultipleOf(d)) return false;
    }
    return true;
  }
}

/**
 * The sum of the squares of the first ten natural numbers is,
 *     1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 *     (1 + 2 + ... + 10)^2 = 55^2 = 3025
 * Hence the difference between the sum of the squares of the first ten natural numbers and the
 * square of the sum is 3025 - 385 = 2640.
 * 
 * Find the difference between the sum of the squares of the first one hundred natural numbers and
 * the square of the sum.
 */
class P6 : IProblem<int>
{
  public int Solve()
  {
    int sumOfSquares = 0;
    int squareOfSums = 0;
    for (int i = 1; i <= 100; i++)
    {
      sumOfSquares += i * i;
      squareOfSums += i;
    }
    squareOfSums *= squareOfSums;
    return Math.Abs(sumOfSquares - squareOfSums);
  }
}

/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is
 * 13.  What is the 10,001st prime number?
 */
class P7 : IProblem<long>
{
  public long Solve()
  {
    int target = 10_001;
    return Primes.Global[target - 1];
  }
}

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are
 * 9 x 9 x 8 x 9 = 5832.
 * 
 *     73167176531330624919225119674426574742355349194934
 *     96983520312774506326239578318016984801869478851843
 *     85861560789112949495459501737958331952853208805511
 *     12540698747158523863050715693290963295227443043557
 *     66896648950445244523161731856403098711121722383113
 *     62229893423380308135336276614282806444486645238749
 *     30358907296290491560440772390713810515859307960866
 *     70172427121883998797908792274921901699720888093776
 *     65727333001053367881220235421809751254540594752243
 *     52584907711670556013604839586446706324415722155397
 *     53697817977846174064955149290862569321978468622482
 *     83972241375657056057490261407972968652414535100474
 *     82166370484403199890008895243450658541227588666881
 *     16427171479924442928230863465674813919123162824586
 *     17866458359124566529476545682848912883142607690042
 *     24219022671055626321111109370544217506941658960408
 *     07198403850962455444362981230987879927244284909188
 *     84580156166097919133875499200524063689912560717606
 *     05886116467109405077541002256983155200055935729725
 *     71636269561882670428252483600823257530420752963450
 * 
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
 * What is the value of this product?
 */
class P8 : IProblem<long>
{
  private static readonly string DIGITS =
      "73167176531330624919225119674426574742355349194934"
    + "96983520312774506326239578318016984801869478851843"
    + "85861560789112949495459501737958331952853208805511"
    + "12540698747158523863050715693290963295227443043557"
    + "66896648950445244523161731856403098711121722383113"
    + "62229893423380308135336276614282806444486645238749"
    + "30358907296290491560440772390713810515859307960866"
    + "70172427121883998797908792274921901699720888093776"
    + "65727333001053367881220235421809751254540594752243"
    + "52584907711670556013604839586446706324415722155397"
    + "53697817977846174064955149290862569321978468622482"
    + "83972241375657056057490261407972968652414535100474"
    + "82166370484403199890008895243450658541227588666881"
    + "16427171479924442928230863465674813919123162824586"
    + "17866458359124566529476545682848912883142607690042"
    + "24219022671055626321111109370544217506941658960408"
    + "07198403850962455444362981230987879927244284909188"
    + "84580156166097919133875499200524063689912560717606"
    + "05886116467109405077541002256983155200055935729725"
    + "71636269561882670428252483600823257530420752963450";

  public long Solve()
  {
    string matchingDigits = "";
    long matchingProduct = 0;
    foreach (string digits in AdjacentDigits(DIGITS, 13))
    {
      long product = DigitsProduct(digits);
      if (product > matchingProduct)
      {
        matchingDigits = digits;
        matchingProduct = product;
      }
    }
    Console.WriteLine($"Largest product: {matchingDigits} => {matchingProduct}");
    return matchingProduct;
  }

  private static IEnumerable<string> AdjacentDigits(string s, int len)
  {
    for (int i = 0; i + len <= s.Length; i++)
    {
      yield return s.Substring(i, len);
    }
  }

  private static long DigitsProduct(string digits) => digits
      .Where(it => it >= '0' && it <= '9')
      .Select(it => (long)(it - '0'))
      .Aggregate((d1, d2) => d1 * d2);
}