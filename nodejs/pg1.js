const pg1 = {};
export default pg1;

import {Primes, Range} from "./utils.js";

/**
 * [Problem 1](https://projecteuler.net/problem=1)
 * 
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
 * The sum of these multiples is 23.
 * 
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
pg1.p1 = function() {
  // Note:  zero is not considered a natural number in this problem

  let sum = 0;
  Range.open(1,1000).forEach(i => {
    if (i.isMultipleOf(3) || i.isMultipleOf(5)) {
      sum += i;
    }
  });
  console.log(sum.foobar())
  return sum;
}

/**
 * [Problem 2](https://projecteuler.net/problem=2):
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
 * starting with 1 and 2, the first 10 terms will be:
 * 
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find
 * the sum of the even-valued terms.
 */
pg1.p2 = function() {
  function* seqFibonacci() {
    let current=1, next=2;
    while(true) {
      yield current;
      [current, next] = [next, next + current];
    }
  }

  let sum = 0;
  const sequence = seqFibonacci();
  let term = sequence.next().value;
  while (term < 4_000_000) {
    if (term.isEven()) {
      sum += term;
    }
    term = sequence.next().value;
  }

  return sum;
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143?</p>
 */
pg1.p3 = function() {
  console.log(`Prime factors of 13195: ${Number(13195).findPrimeFactors()}`)

  let primeFactors = Number(600851475143).findPrimeFactors();
  console.log(`Prime factors of 600851475143: ${primeFactors}`)
  return primeFactors.last();
}

/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of
 * two 2-digit numbers is 9009 = 91 x 99.
 * 
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
pg1.p4 = function() {
  // let testNums = [123, 12321, 220, 202202, 9009]
  // for (let n of testNums) {
  //   console.log(`${n}: ${n.isPalindromic()}`)
  // }

  let largestMatch = 0;
  for(let i=0; i<1000; i++) {
    for (let j=i; j<1000; j++) {
      let product = i*j;
      if (product > largestMatch && product.isPalindromic()) {
        largestMatch = product
      }
    }
  }
  return largestMatch;
}

/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible (divisible with no remainder) by all of the numbers from 1 to 20?
 */
pg1.p5 = function() {
  function isMultipleOfAllUpTo(n, k) {
    for(let j=k; j>1; j--) {
      if (!n.isMultipleOf(j)) return false;
    }
    return true;
  }

  let k = 20;
  for(let i=k; i<Number.MAX_SAFE_INTEGER; i+=k) {
    if (isMultipleOfAllUpTo(i, k)) {
      return i;
    }
  }
}

/**
 * The sum of the squares of the first ten natural numbers is,
 *     1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 *     (1 + 2 + ... + 10)^2 = 55^2 = 3025
 * Hence the difference between the sum of the squares of the first ten natural numbers and the
 * square of the sum is 3025 - 385 = 2640.
 * 
 * Find the difference between the sum of the squares of the first one hundred natural numbers and
 * the square of the sum.
 */
pg1.p6 = function() {
  let sumOfSquares = 0;
  let sum = 0;
  for(let i=1; i<=100; i++) {
    sum += i;
    sumOfSquares += i*i;
  }
  return Math.abs(sumOfSquares - sum*sum);
}

/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is
 * 13.  What is the 10,001st prime number?
 */
pg1.p7 = function() {
  let target = 10_001;
  return Primes.global.at(target-1)
}

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are
 * 9 x 9 x 8 x 9 = 5832.
 * 
 *     73167176531330624919225119674426574742355349194934
 *     96983520312774506326239578318016984801869478851843
 *     85861560789112949495459501737958331952853208805511
 *     12540698747158523863050715693290963295227443043557
 *     66896648950445244523161731856403098711121722383113
 *     62229893423380308135336276614282806444486645238749
 *     30358907296290491560440772390713810515859307960866
 *     70172427121883998797908792274921901699720888093776
 *     65727333001053367881220235421809751254540594752243
 *     52584907711670556013604839586446706324415722155397
 *     53697817977846174064955149290862569321978468622482
 *     83972241375657056057490261407972968652414535100474
 *     82166370484403199890008895243450658541227588666881
 *     16427171479924442928230863465674813919123162824586
 *     17866458359124566529476545682848912883142607690042
 *     24219022671055626321111109370544217506941658960408
 *     07198403850962455444362981230987879927244284909188
 *     84580156166097919133875499200524063689912560717606
 *     05886116467109405077541002256983155200055935729725
 *     71636269561882670428252483600823257530420752963450
 * 
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
 * What is the value of this product?
 */
pg1.p8 = function() {
  let digits =
      '73167176531330624919225119674426574742355349194934'
    + '96983520312774506326239578318016984801869478851843'
    + '85861560789112949495459501737958331952853208805511'
    + '12540698747158523863050715693290963295227443043557'
    + '66896648950445244523161731856403098711121722383113'
    + '62229893423380308135336276614282806444486645238749'
    + '30358907296290491560440772390713810515859307960866'
    + '70172427121883998797908792274921901699720888093776'
    + '65727333001053367881220235421809751254540594752243'
    + '52584907711670556013604839586446706324415722155397'
    + '53697817977846174064955149290862569321978468622482'
    + '83972241375657056057490261407972968652414535100474'
    + '82166370484403199890008895243450658541227588666881'
    + '16427171479924442928230863465674813919123162824586'
    + '17866458359124566529476545682848912883142607690042'
    + '24219022671055626321111109370544217506941658960408'
    + '07198403850962455444362981230987879927244284909188'
    + '84580156166097919133875499200524063689912560717606'
    + '05886116467109405077541002256983155200055935729725'
    + '71636269561882670428252483600823257530420752963450';

  function* adjacentDigits(len) {
    for (let i=0; i+len <= digits.length; i++) {
      let adjacentDigits = digits.substring(i, i+len);
      // if(i < 10 || i > digits.length - (len + 10)) {
      //   console.log(`${i}: ${adjacentDigits}`);
      // }
      yield(adjacentDigits);
    }
  }

  function digitProduct(digits) {
    let product = 1;
    for (let digit of digits) {
      product *= Number(digit);
    }
    return product;
  }

  let match = undefined;
  let matchProduct = 0;
  for(let candidate of adjacentDigits(13)) {
    let product = digitProduct(candidate);
    if (product > matchProduct) {
      match = candidate;
      matchProduct = product;
    }
  };
  console.log(match);
  return matchProduct;
}

/**
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
 *     a^2 + b^2 = c^2.
 * For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
 * 
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000.  Find the product abc.
 */
pg1.p9 = function() {
  for(let a=1; a<1000; a++) {
    for (let b=a; b<1000; b++) {
      let c = 1000 - (a + b);
      if (a*a + b*b == c*c) {
        console.log(`Found [${[a,b,c]}]`)
        return a*b*c;
      }
    }
  }
}

/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 * Find the sum of all the primes below two million.
 */
pg1.p10 = function() {
  let sum = 0;
  for(let p of Primes.global.sequence()) {
    if (p >= 2_000_000) break;
    sum += p;
  }
  return sum;
}
